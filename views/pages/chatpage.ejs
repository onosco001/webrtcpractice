<!DOCTYPE html>
<html>
<head> 
    <%- include('../partials/head.ejs') %>  
    <title>Chat Interface</title>  

    <style>  
        p, h1 {
            font-family: 'Poppins', sans-serif;
        }

        .first_section {
            width:55%;   
            padding-left: 10px;
            padding-right: 20px;
            border: none;
        } 

        .chat-section {
            width: 100%;
            display: flex;
            flex-direction: column;
            height: 100%; /* Full height for the chat section */
        }

        .input_sec {   
            width: 100%; 
            display: flex;
            align-items: center;  
            border: 1px solid lightgrey;   
            margin-bottom: 20px;
        } 

        .input_sec input {
            padding: 15px;
            width: 100%;
            background-color: white; 
            border: none; 
        }  

        .input_sec input:focus {
            outline: none;
        }

        .input_sec i {
            width: 20%;
        }

        .chat-online {
            color: #34ce57;
        }

        .chat-offline {
            color: #e4606d;
        }

        .list-group-item {
            padding: 10px;
            border: none;
            display: flex;
            justify-content: center;
            text-align: center;
            cursor: pointer;
            width: 100%; /* Ensure it stretches */
            margin-top: 5px;
            background-color: white;
        } 

        .badge {
            background-color: #28a745;
            color: white; 
            font-size: 12px;    
            padding: 7px;
            border-radius: 5%;  
        }

        .list-group-item:hover {
            background-color: #f8f9fa;
        } 

        .d-flex {
            display: flex;
            justify-content: space-between;
            min-width: 100px;  
            padding-left: 20px; 
            padding-right: 20px;
        } 

        .enclose {
            display: flex;
            justify-content: space-between;
            min-width: 100px; 
            height: 100vh;
            padding-left: 20px; 
            padding-right: 20px;  
            margin-top: 70px;
        } 

        .chat-messages {
            display: flex;
            flex-direction: column;
            overflow-y: auto;
            padding:25px;  
            background-color:white;
            border:1px solid lightgrey;
            flex-grow: 1; /* Grow to fill the available space */
            margin-top:10px;
            margin-bottom: 70px; /* Allow space for the input container */
        }    

        .input-container {
            display: flex;
            position: sticky; /* Ensure the input stays at the bottom */
            bottom: 0;
            width: 100%;
            padding: 10px;
            background-color: white;
            border-top: 1px solid lightgray;
        }      
        
        .chat-input { 
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px; 
            width: 100%; 
        }

        .send-button { 
            margin-left: 10px;
            padding: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .chat-message-left, .chat-message-right {
            display: flex;
            flex-shrink: 0; 
            margin-top:10px;
        }

        .chat-message-left {
            margin-right: auto;
        }

        .chat-message-right {
            flex-direction: row-reverse;
            margin-left: auto;
        }

        .chat-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
        }
    </style>
</head>
<body>  


    <audio id="displayAud" controls> 
        Your browser does not support the audio element.
    </audio> 

    <audio id="displayRemAud" controls> 
        Your browser does not support the audio element.
    </audio>

    
   <div class="enclose">   
        <div class="first_section"> 
            <h1>Messages</h1>    

            <div class="input_sec">
                <input type="text" placeholder="Search...">  
                <i class="fa fa-search"></i>
            </div>

            <!-- List of messages -->
            <div id="theonlineusers">  
                
            </div>  
            
        

        </div>  
    
        <div class="chat-section">
            <div>
                <div class="d-flex">
                    <img src="https://bootdey.com/img/Content/avatar/avatar3.png" class="chat-avatar" alt="Sharon Lessman">
                    <div>
                        <strong>Sharon Lessman</strong>
                        <div><em>Typing...</em></div> 
                    </div>
                    <div>
                        <button id='acall' style="padding-top:15px;" class="btn btn-primary btn-lg"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-phone feather-lg"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg></button>
                        <button style="padding-top:15px;" class="btn btn-info btn-lg"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-video feather-lg"><polygon points="23 7 16 12 23 17 23 7"></polygon><rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect></svg></button>
                        <button style="padding-top:15px;" class="btn btn-light border btn-lg"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-more-horizontal feather-lg"><circle cx="12" cy="12" r="1"></circle><circle cx="19" cy="12" r="1"></circle><circle cx="5" cy="12" r="1"></circle></svg></button>
                    </div>
                </div>  
            </div>   

            <div id="message-container" class="chat-messages">
                <!-- Chat messages go here -->      
            </div>

            <div id="input-container" class="input-container">
                <input id="chat-input" type="text" class="chat-input" placeholder="Type a message">
                <button id="send-button" class="send-button">Send</button>
            </div>
        </div>   
   </div>   

  

  
   <script src="/socket.io/socket.io.js"></script>

   <script>
        const socket = io();   
        const room = 'rooma_roomB';
        socket.emit('joinRoom', room);  
       //let auser = document.getElementById('myself').getAttribute('myinfo'); 
       let chatInput = document.getElementById('chat-input');
       // chatInput.addEventListener('input', () => {
       //     const notification = 'Typing...';
        //    socket.emit('typing', notification);
       // });  




       //show online users 
       socket.on('connectedUsers', (onlineUsersUserName)=>{
             var ousers = onlineUsersUserName; 
             var parDiv = document.getElementById('theonlineusers'); 
             ousers.forEach((each)=>{
                  var newDiv = document.createElement('div');
                  newDiv.innerHTML = `     
                        <div class="list-group-item">  
                <div style="width: 100%"> 
                    <img src="https://bootdey.com/img/Content/avatar/avatar5.png" class="chat-avatar" alt="Vanessa Tucker">
                </div> 
                <div style="width: 100%">
                    <p class='bold'>${each}</p>
                    <div class="small"><span class="fa fa-circle chat-online"></span> Online</div>
                </div>  
                <div style="width: 100%;">
                    <p class="badge">5</p>
                </div>
            </div>  
                  `;  
                  parDiv.appendChild(newDiv);
             });
       });  
 


         //show updated online users 
         socket.on('updatedUsers', (updatedUsersUserName)=>{
             var ousers = onlineUsersUserName; 
             var parDiv = document.getElementById('theonlineusers'); 
             ousers.forEach((each)=>{
                  var newDiv = document.createElement('div');
                  newDiv.innerHTML = `     
                        <div class="list-group-item">  
                <div style="width: 100%"> 
                    <img src="https://bootdey.com/img/Content/avatar/avatar5.png" class="chat-avatar" alt="Vanessa Tucker">
                </div> 
                <div style="width: 100%">
                    <p class='bold'>${each}</p>
                    <div class="small"><span class="fa fa-circle chat-online"></span> Online</div>
                </div>  
                <div style="width: 100%;">
                    <p class="badge">5</p>
                </div>
            </div>  
                  `;  
                  parDiv.appendChild(newDiv);
             });
       });




       chatInput.addEventListener('keypress', (e)=>{
         if(e.key === 'Enter'){
            let message = chatInput.value;  
            socket.emit('chatmsg', {message, room, auser});

            // Create new div for the user's message
            let newDiv = document.createElement('div'); 
            let messageContainer = document.getElementById('message-container');
            newDiv.innerHTML = `
             <div class="chat-message-right">
                    <div>
                    <img src="https://bootdey.com/img/Content/avatar/avatar1.png" class="rounded-circle mr-1" alt="Chris Wood" width="40" height="40">
                    <div class="text-muted small text-nowrap mt-2">2:35 am</div>
                    </div>
                    <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                    <div class="font-weight-bold mb-1">You</div>
                     ${message}
                    </div>
                    </div> `;
            messageContainer.appendChild(newDiv); 
            chatInput.value = ''; // Clear the input box 
         }
       }); 
       

        let sendButton = document.getElementById('send-button');
        sendButton.onclick = () => {  
            let message = chatInput.value;    
            socket.emit('chatmsg', {message, room, auser});

            // Create new div for the user's message
            let newDiv = document.createElement('div'); 
            let messageContainer = document.getElementById('message-container');
            newDiv.innerHTML = `
             <div class="chat-message-right">
                    <div>
                    <img src="https://bootdey.com/img/Content/avatar/avatar1.png" class="rounded-circle mr-1" alt="Chris Wood" width="40" height="40">
                    <div class="text-muted small text-nowrap mt-2">2:35 am</div>
                    </div>
                    <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                    <div class="font-weight-bold mb-1">You</div>
                     ${message}
                    </div>
                    </div> `;
            messageContainer.appendChild(newDiv); 
            chatInput.value = ''; // Clear the input box 
        }  






       // socket.on('typingg', (notification) => {
         //   document.querySelector('.typing').style.display = 'block';
     //   });
  
       //let's listen for incoming messages 
        socket.on('newmessage', (data) => {  
            const {message, auser} = data;  
       // let theuser = document.getElementById('myself').getAttribute('myinfo');  
            // Create new div for the user's message 
            if(auser !== theuser){
            let newDiv = document.createElement('div'); 
            let messageContainer = document.getElementById('message-container');
            newDiv.innerHTML = `
             <div class="chat-message-left">
                    <div>
                    <img src="https://bootdey.com/img/Content/avatar/avatar1.png" class="rounded-circle mr-1" alt="Chris Wood" width="40" height="40">
                    <div class="text-muted small text-nowrap mt-2">2:35 am</div>
                    </div>
                    <div class="flex-shrink-1 ml-3 bg-light rounded py-2 px-3 mr-3">
                    <div class="font-weight-bold mb-1">You</div>
                     ${message}
                    </div>
                    </div> `;
            messageContainer.appendChild(newDiv);  
                }  else {
                        // Create new div for the user's message
            let newDiv = document.createElement('div'); 
            let messageContainer = document.getElementById('message-container');
            newDiv.innerHTML = `
             <div class="chat-message-right">
                    <div>
                    <img src="https://bootdey.com/img/Content/avatar/avatar1.png" class="rounded-circle mr-1" alt="Chris Wood" width="40" height="40">
                    <div class="text-muted small text-nowrap mt-2">2:35 am</div>
                    </div>
                    <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                    <div class="font-weight-bold mb-1">You</div>
                     ${message}
                    </div>
                    </div> `;
            messageContainer.appendChild(newDiv); 
                }
        });   

        const pc = new RTCPeerConnection();

          var call = document.getElementById('acall');
          
          
          call.onclick = function() { 
    alert('calling');    
    navigator.mediaDevices.getUserMedia({ audio: true })
        .then((stream) => {
            var displayAud = document.getElementById('displayAud');
            displayAud.srcObject = stream;  
            stream.getTracks().forEach((track) => { 
                // Track added and ready to be shared remotely 
                pc.addTrack(track); 
            });

            // Create the offer after getting the media
            return pc.createOffer();
        })
        .then((offer) => {
            return pc.setLocalDescription(offer).then(() => {
                // Now that local description is set, we can safely access it
                const localDescription = pc.localDescription;
                console.log(localDescription);
                socket.emit('offer', JSON.stringify(localDescription));
            });
        })
        .catch((err) => {
            alert(err.message);
        });
};



socket.on('offer', (data) => {  
    const localDescription = JSON.parse(data);
    alert('I am listening');

    navigator.mediaDevices.getUserMedia({ audio: true })
        .then((stream) => {
            var displayAud = document.getElementById('displayAud');
            displayAud.srcObject = stream;  
            stream.getTracks().forEach((track) => { 
                // Track added and ready to be shared remotely 
                pc.addTrack(track); 
            });

            return pc.setRemoteDescription(localDescription); 
        })
        .then(() => {
            return pc.createAnswer(); // Create the answer here
        })
        .then((answer) => { // Capture the answer here
            return pc.setLocalDescription(answer) // Set the local description
                .then(() => {
                    // Emit the answer after setting the local description
                    socket.emit('answer', JSON.stringify(answer)); // Emit the answer here
                });
        })
        .catch((err) => {
            alert(err.message);
        });   
});
  


    socket.on('answer', (data)=>{   
        //parse opponent's localdescription  
        const answer = JSON.parse(data); 
        console.log(answer);
        pc.setRemoteDescription(answer);
    });
     

  // Correctly handle incoming tracks
  pc.ontrack = (event) => {
    const audioTrack = event.track; // Access the individual track directly
    if (audioTrack) {
        const remoteStream = new MediaStream();
        remoteStream.addTrack(audioTrack); // Add the incoming track to a new stream
        const displayRemAud = document.getElementById('displayRemAud');
        displayRemAud.srcObject = remoteStream; // Set the audio stream from the remote peer
    } else {
        alert('No streams available in the event.');
    }
};

       
   </script>

</body>
</html>  
